# AI コーディング標準規則

## 概要
NextJS/React初心者向けのAIコーディング・リファクタリング標準規則です。
可読性、型安全性、学習効果を最重視したコーディングスタンダードを定義します。

## 🎯 基本方針

### 対象読者
- NextJS/React初心者〜中級者
- バックエンド開発経験者（フロントエンド初心者）
- 個人開発〜小規模チーム開発

### 重要度順位
1. **学習効果** - 理解しやすく、教育的価値が高い
2. **可読性** - 初心者でもコードが読める
3. **型安全性** - 実行時エラーを防ぐ
4. **保守性** - 将来の変更に対応しやすい
5. **パフォーマンス** - 過度な最適化は避ける

## 📋 クイックチェックリスト

### 即座にチェックすべき項目
- [ ] `any`型を使用していない
- [ ] ファイル先頭にコメントがある
- [ ] 関数にJSDocコメントがある
- [ ] エラーハンドリングが適切
- [ ] テストが重要な機能をカバーしている

## 🏗️ アーキテクチャ標準

### ディレクトリ構造（小規模プロジェクト）
```
src/
├── app/              # Next.js App Router
├── types/            # 型定義
├── services/         # ビジネスロジック
├── hooks/            # カスタムフック
├── contexts/         # React Context
├── providers/        # プロバイダーコンポーネント
├── components/       # UIコンポーネント
├── lib/              # ユーティリティ
└── __tests__/        # テストファイル
```

### 依存関係のルール
```
app/ → hooks/ → services/ → types/
     ↓        ↓           ↓
contexts/ → services/ → types/
providers/ → contexts/ → types/
```

## 🔧 型安全性標準

### 必須ルール
```typescript
// ❌ 禁止
const [user, setUser] = useState<any>(null)
function handleData(data: any) { ... }

// ✅ 推奨
const [user, setUser] = useState<User | null>(null)
function handleData(data: UserData) { ... }
```

### 型定義パターン
```typescript
// types/feature.ts
/**
 * [機能名]関連の型定義
 * 
 * [詳細説明と使用される概念]
 */

export interface FeatureData {
  /** プロパティの説明 */
  id: string
  /** オプショナルプロパティの説明 */
  name?: string
}

export interface FeatureContextType {
  data: FeatureData | null
  isLoading: boolean
  error: FeatureError | null
  // 操作関数
  updateData: (data: FeatureData) => Promise<void>
}
```

## 📝 コメント標準

### ファイルヘッダー
```typescript
/**
 * [ファイルの目的]
 * 
 * [詳細説明]
 * [学習ポイント - 使用されるReact/Next.jsの概念]
 * [アーキテクチャ上の位置づけ]
 */
```

### 関数コメント
```typescript
/**
 * [関数の目的を簡潔に]
 * 
 * [詳細な説明]
 * [使用例（必要に応じて）]
 * 
 * @param {Type} paramName - パラメータの説明
 * @returns {Type} 戻り値の説明
 * @throws {ErrorType} エラーの説明
 */
export async function functionName(param: Type): Promise<ReturnType> {
  // 処理の説明
  const result = await someOperation()
  
  // 条件分岐の説明
  if (condition) {
    // なぜこの処理が必要かの説明
    return processedResult
  }
  
  return result
}
```

### 学習効果を高めるコメント
```typescript
// React Contextパターンの実装
// この仕組みにより、プロバイダーツリー内のどのコンポーネントからでも
// 認証状態にアクセスできるようになります
const context = useContext(AuthContext)

// プロバイダー外での使用を防ぐエラーチェック
// この仕組みは、React Contextの適切な使用パターンです
if (!context) {
  throw new Error('useAuth must be used within an AuthProvider')
}
```

## 🧪 テスト標準

### 必須テスト対象
1. カスタムフック（`hooks/`）
2. サービス層（`services/`）
3. 重要なビジネスロジック

### テストファイル構造
```typescript
/**
 * [対象]のテスト
 * 
 * [テストの目的と学習ポイント]
 * [使用するテスト手法の説明]
 */

import { renderHook } from '@testing-library/react'
import { functionUnderTest } from '@/path/to/function'

// モックやテストデータの説明
const mockData = { ... }

describe('functionUnderTest', () => {
  // 各テストの前にクリーンアップ
  beforeEach(() => {
    jest.clearAllMocks()
  })

  /**
   * テスト1: 正常系
   * 
   * [テストの目的と期待する動作]
   */
  it('正常なケースで期待通りの結果を返す', async () => {
    // テストの実行と検証
  })

  /**
   * テスト2: 異常系
   * 
   * [エラーケースの説明]
   */
  it('エラーケースで適切なエラーを返す', async () => {
    // エラーテストの実行と検証
  })
})
```

## 🔄 リファクタリング手順

### 段階的アプローチ
1. **現状把握** - 既存コードの理解
2. **型定義** - any型の特定と型定義作成
3. **サービス層** - ビジネスロジックの分離
4. **既存更新** - 段階的な型適用
5. **テスト追加** - 重要機能のテスト
6. **品質確認** - 動作確認とテスト実行

### 各段階での確認事項
- **型定義**: JSDocコメント、適切な型設計
- **サービス層**: 単一責任、エラーハンドリング
- **既存更新**: any型排除、コメント追加
- **テスト**: 正常系・異常系・エッジケース
- **品質確認**: TypeScript、ESLint、テスト通過

## 🚨 注意事項・制限

### 避けるべきパターン
```typescript
// ❌ 過度な抽象化
interface GenericDataManager<T, U, V> { ... }

// ❌ 不必要な分割
// 5行の関数のためだけのファイル作成

// ❌ テストのためのテスト
it('関数が存在することを確認', () => {
  expect(myFunction).toBeDefined()
})

// ❌ コメントの過多
// この変数はカウンターです
let counter = 0 // カウンターを0で初期化
```

### 推奨パターン
```typescript
// ✅ 適切な抽象化レベル
interface UserAuthenticationService {
  signIn(credentials: SignInCredentials): Promise<User>
  signOut(): Promise<void>
}

// ✅ 意味のある分割
// 関連する機能をまとめたサービス

// ✅ 価値のあるテスト
it('認証失敗時に適切なエラーメッセージを返す', () => {
  // 実際の動作を検証
})

// ✅ 価値のあるコメント
// 認証状態の確認が完了するまで待機
// この処理により、未初期化状態でのリダイレクトを防げます
if (!isLoading) { ... }
```

## 📖 学習リソース

### 参考になる実装パターン
- React Context + カスタムフック
- サービス層によるビジネスロジック分離
- TypeScriptインターフェースを活用した型安全性
- Jest + Testing Libraryによるテスト

### 継続的学習
- 四半期ごとのコードレビュー
- 新しいNext.js/Reactパターンの導入検討
- TypeScriptベストプラクティスの更新
- テスト手法の改善

## 🔗 関連ドキュメント

- [リファクタリング・コーディングガイドライン](./refactoring-guidelines.md)
- [リファクタリング実践チェックリスト](./refactoring-checklist.md)
- [NextJS基本ルール](./nextjs-rules.md)

---

**最終更新**: 今回のリファクタリング経験に基づいて作成
**適用範囲**: NextJS + TypeScript + React プロジェクト 