# リファクタリング実践チェックリスト

## 事前準備

### □ プロジェクト状況の把握
- [ ] package.jsonで依存関係を確認
- [ ] 既存のディレクトリ構造を把握
- [ ] 主要ファイルの内容を確認（layout.tsx, page.tsx等）
- [ ] any型の使用箇所を特定
- [ ] テスト環境の有無を確認

### □ 目標設定
- [ ] 型安全性の向上目標を設定
- [ ] アーキテクチャ改善の範囲を決定
- [ ] 過剰な分割を避ける境界を設定
- [ ] テスト対象の優先度を決定

## フェーズ1: 型定義の整理

### □ 型定義ディレクトリの作成
```bash
mkdir types
touch types/auth.ts
touch types/index.ts
```

### □ 既存any型の型定義作成
- [ ] `types/auth.ts`: 認証関連の型を定義
  - [ ] User インターフェース
  - [ ] AuthContextType インターフェース  
  - [ ] AuthError インターフェース
  - [ ] その他必要な型
- [ ] `types/index.ts`: 型のエクスポートファイル作成

### □ 型定義の品質チェック
- [ ] JSDocコメントの追加
- [ ] 各プロパティの説明コメント
- [ ] オプショナルプロパティの適切な設定
- [ ] ユニオン型の適切な使用

## フェーズ2: サービス層の分離

### □ サービスディレクトリの作成
```bash
mkdir services
touch services/authService.ts
```

### □ ビジネスロジックの抽出
- [ ] 外部API呼び出しをサービス層に移動
- [ ] エラーハンドリングの統一
- [ ] 型安全性の確保
- [ ] 詳細なコメントの追加

### □ サービス層の品質チェック
- [ ] 単一責任原則の遵守
- [ ] 適切なエラー変換
- [ ] JSDocによる詳細なドキュメント
- [ ] 使用例の提供

## フェーズ3: 既存コードの更新

### □ コンテキストファイルの更新
- [ ] `contexts/authContext.ts`: 新しい型定義を使用
- [ ] 不要な型定義の削除
- [ ] コメントの追加

### □ プロバイダーの更新
- [ ] `providers/AuthProvider.tsx`: any型の排除
- [ ] サービス層の使用
- [ ] エラーハンドリングの改善
- [ ] 詳細なコメントの追加

### □ カスタムフックの更新
- [ ] `hooks/useAuth.ts`: 型安全性の向上
- [ ] エラーメッセージの改善
- [ ] 使用例の追加

### □ その他ファイルの更新
- [ ] `providers/index.tsx`: コメント追加
- [ ] `app/page.tsx`: コメントと型安全性
- [ ] `app/layout.tsx`: コメント追加
- [ ] `lib/utils.ts`: コメント追加

## フェーズ4: テスト環境の構築

### □ テストライブラリのインストール
```bash
npm install --save-dev @testing-library/react @testing-library/jest-dom jest jest-environment-jsdom @types/jest
```

### □ テスト設定ファイルの作成
- [ ] `jest.config.js`: Jest設定
- [ ] `jest.setup.js`: テストセットアップ
- [ ] `package.json`: テストスクリプト追加

### □ テストディレクトリの作成
```bash
mkdir -p __tests__/hooks
mkdir -p __tests__/services
```

## フェーズ5: テストの実装

### □ カスタムフックのテスト
- [ ] `__tests__/hooks/useAuth.test.tsx`: 作成
  - [ ] 正常系テスト
  - [ ] エラー系テスト（Provider外使用）
  - [ ] 各状態のテスト（認証済み、未認証、ローディング）
  - [ ] 学習効果の高いコメント

### □ サービス層のテスト
- [ ] `__tests__/services/authService.test.ts`: 作成
  - [ ] 正常系テスト
  - [ ] 異常系テスト
  - [ ] エッジケーステスト
  - [ ] モックの使用例

### □ テストの実行と確認
```bash
npm test
```
- [ ] すべてのテストが通ることを確認
- [ ] テストカバレッジの確認
- [ ] テストの可読性確認

## フェーズ6: 品質チェック

### □ 型安全性チェック
- [ ] TypeScriptコンパイルエラーなし
- [ ] any型の使用なし
- [ ] 適切な型推論
- [ ] 型エラーの解消

### □ コード品質チェック
- [ ] ESLintエラーなし
- [ ] 一貫したコーディングスタイル
- [ ] 適切な命名規則
- [ ] 不要なコードの除去

### □ ドキュメンテーションチェック
- [ ] すべてのファイルにヘッダーコメント
- [ ] 関数にJSDocコメント
- [ ] 複雑なロジックに説明コメント
- [ ] 初心者向けの学習コメント

## フェーズ7: 最終確認

### □ アプリケーション動作確認
```bash
npm run dev
```
- [ ] アプリケーションが正常に起動
- [ ] 既存機能が正常動作
- [ ] エラーが発生していない

### □ ビルド確認
```bash
npm run build
```
- [ ] ビルドが成功
- [ ] 型エラーなし
- [ ] ワーニングの確認

### □ テスト確認
```bash
npm test
npm run test:coverage
```
- [ ] すべてのテストが通る
- [ ] 適切なテストカバレッジ

## リファクタリング完了後のメンテナンス

### □ 継続的改善
- [ ] 定期的なコードレビュー
- [ ] 新機能追加時の設計ガイドライン遵守
- [ ] テストの継続的な追加
- [ ] ドキュメントの更新

### □ 学習効果の測定
- [ ] チームメンバーのコード理解度向上
- [ ] 開発速度の改善
- [ ] バグ発生率の減少
- [ ] 新機能追加の容易さ

## 注意点・Tips

### ⚠️ 避けるべきこと
- 過度な分割によるコード分散
- 必要以上の抽象化
- テストのためのテスト
- コメントの過多

### 💡 成功のコツ
- 小さなステップでの段階的改善
- 各フェーズでの動作確認
- チームでの方針共有
- ユーザビリティの維持

### 📝 記録すべき事項
- リファクタリング前後の改善点
- 発見した技術負債
- 今後の改善課題
- 学習した内容 