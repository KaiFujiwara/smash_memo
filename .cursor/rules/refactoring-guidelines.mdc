# リファクタリング・コーディングガイドライン

## 概要
このルールは、NextJS/React初心者向けのリファクタリングとコーディングに関するガイドラインです。
可読性、型安全性、保守性を重視し、学習効果の高いコード構造を目指します。

## 1. 型安全性の原則

### 1.1 any型の完全排除
- **禁止**: `any`型の使用
- **推奨**: 適切なTypeScriptインターフェースの定義
- **例外**: 外部ライブラリで型定義が不完全な場合のみ、明示的にコメント付きで使用

```typescript
// ❌ 悪い例
const [user, setUser] = useState<any>(null)

// ✅ 良い例
const [user, setUser] = useState<User | null>(null)
```

### 1.2 型定義の一元管理
- `types/`ディレクトリに型定義を集約
- 機能別にファイルを分割（auth.ts, user.ts など）
- `types/index.ts`で型をエクスポート

### 1.3 インターフェースの命名規則
- 明確で説明的な名前を使用
- 用途に応じてプレフィックス/サフィックスを付与
  - `Props`: React コンポーネントのProps
  - `Type`: Context や共通型
  - `Config`: 設定関連
  - `Error`: エラー関連

## 2. アーキテクチャ設計原則

### 2.1 レイヤードアーキテクチャ
小規模プロジェクトでも適切な層分離を実施：

```
presentation/     # React コンポーネント
├── hooks/        # カスタムフック
├── contexts/     # React Context
└── providers/    # プロバイダーコンポーネント

business/         # ビジネスロジック
└── services/     # サービス層

infrastructure/   # 外部依存
├── types/        # 型定義
├── utils/        # ユーティリティ
└── lib/          # 外部ライブラリ設定
```

### 2.2 責務の分離
- **プレゼンテーション層**: UI表示とユーザーインタラクション
- **サービス層**: ビジネスロジックと外部API通信
- **Context層**: グローバル状態管理

### 2.3 依存関係の方向
- プレゼンテーション → サービス → インフラストラクチャ
- 逆方向の依存は禁止

## 3. コメント・ドキュメンテーション規則

### 3.1 ファイルレベルコメント
すべてのファイルの冒頭に以下を記載：
```typescript
/**
 * [ファイルの目的]
 * 
 * [詳細説明]
 * [学習ポイントや使用される概念]
 */
```

### 3.2 関数・コンポーネントレベルコメント
JSDocスタイルで詳細に記載：
```typescript
/**
 * [関数の目的]
 * 
 * [詳細な説明]
 * [使用例がある場合は記載]
 * 
 * @param {Type} paramName - パラメータの説明
 * @returns {Type} 戻り値の説明
 * @throws {ErrorType} エラーの説明
 */
```

### 3.3 コードブロックコメント
複雑なロジックには説明コメントを追加：
```typescript
// React Contextから値を取得
const context = useContext(AuthContext)

// Providerの外で使用された場合のエラーチェック
if (!context) {
  throw new Error('useAuth must be used within an AuthProvider')
}
```

### 3.4 学習効果を高めるコメント
初心者向けに以下を含める：
- なぜそのパターンを使うのか
- 代替手法との比較
- 実際の使用例
- 注意点やベストプラクティス

## 4. テスト戦略

### 4.1 必須テスト対象
- カスタムフック
- サービス層の関数
- 重要なビジネスロジック

### 4.2 テストファイル構成
```
__tests__/
├── hooks/        # カスタムフックのテスト
├── services/     # サービス層のテスト
└── components/   # コンポーネントのテスト（必要に応じて）
```

### 4.3 テストケース設計
各関数につき以下をカバー：
- 正常系（期待通りの動作）
- 異常系（エラーハンドリング）
- エッジケース（境界値、特殊条件）

### 4.4 学習効果の高いテスト
- モックの使い方を示す
- プロバイダーパターンのテスト方法を学べる
- 非同期処理のテスト手法を含む

## 5. ディレクトリ構成原則

### 5.1 機能別vs層別の判断基準
- **小規模**: 層別構成（types/, services/, hooks/）
- **中規模以上**: 機能別構成（auth/, memo/, user/）

### 5.2 命名規則
- ディレクトリ: kebab-case（my-feature/）
- ファイル: camelCase（authService.ts）
- コンポーネント: PascalCase（AuthProvider.tsx）

## 6. エラーハンドリング

### 6.1 統一エラーフォーマット
```typescript
interface AppError {
  name: string
  message: string
  stack?: string
  // 必要に応じて追加フィールド
}
```

### 6.2 エラー変換
外部ライブラリのエラーは必ずアプリケーション用フォーマットに変換

### 6.3 エラーログ
- 開発環境: 詳細なエラー情報
- 本番環境: ユーザーフレンドリーなメッセージ

## 7. パフォーマンス考慮事項

### 7.1 React最適化
- 不要な`use client`を避ける
- Server Componentsを優先
- 適切なメモ化の実装

### 7.2 バンドルサイズ最適化
- Tree shakingを考慮したインポート
- 動的インポートの活用

## 8. コードレビューチェックリスト

### 8.1 型安全性
- [ ] any型を使用していない
- [ ] 適切な型定義がされている
- [ ] 型エラーが発生しない

### 8.2 可読性
- [ ] 適切なコメントがある
- [ ] 変数・関数名が説明的
- [ ] ファイル構造が理解しやすい

### 8.3 テスト
- [ ] 重要な機能にテストがある
- [ ] テストが網羅的
- [ ] テストが分かりやすい

### 8.4 アーキテクチャ
- [ ] 責務が適切に分離されている
- [ ] 依存関係が正しい方向
- [ ] 拡張性が考慮されている

## 9. 継続的改善

### 9.1 定期的なリファクタリング
- 四半期ごとのコードレビュー
- 技術負債の特定と解消
- 新しいベストプラクティスの導入

### 9.2 学習機会の創出
- コードレビュー時の教育的フィードバック
- ペアプログラミングの実施
- 技術ドキュメントの更新

## 10. 適用範囲

このガイドラインは以下に適用：
- NextJS + TypeScript プロジェクト
- React初心者〜中級者向けのコード
- 個人開発〜小規模チーム開発
- 学習効果を重視するプロジェクト 